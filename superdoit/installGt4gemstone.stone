#!/usr/bin/env superdoit_stone
options
{
	SuperDoitOptionalOptionWithRequiredArg long: 'gt4gemstone' default: '$ROWAN_PROJECTS_HOME/gt4gemstone'.
	SuperDoitOptionalOptionWithRequiredArg long: 'gtoolkitRemote'.
	SuperDoitOptionalOptionWithRequiredArg long: 'projectsHome'.
}
%
# Example options section
#
#options
#{
#	SuperDoitOptionalOptionWithNoArg long: 'noarg'.
#	SuperDoitOptionalOptionWithNoArg long: 'noarg' short: 'n'.
#
#	SuperDoitOptionalOptionWithRequiredArg long: 'optional'.
#	SuperDoitOptionalOptionWithRequiredArg long: 'optional' default: 'default'.
#	SuperDoitOptionalOptionWithRequiredArg long: 'optional' short: 'o'.
#	SuperDoitOptionalOptionWithRequiredArg long: 'optional' short: 'o' default: 'default'.
#
#	SuperDoitRequiredOptionWithRequiredArg long: 'required'.
#	SuperDoitRequiredOptionWithRequiredArg long: 'required' short: 'r'.
#}
#%
#
usage
-----
USAGE 
  $basename [--help | -h] [--debug | -D] 

DESCRIPTION
  Install gt4gemstone from Tonel files into a Rowan-enabled stone. Exits with 0
  if success, 1 if failed.

  It is expected that gt4gemstone has already been cloned (in order to get access 
  to this script), but the other required projects will be cloned if they are not
  already present in projectsHome

OPTIONS
-h, --help        display usage message
-D, --debug       bring up topaz debugger in the event of a script error
--gt4gemstone=<path-to-gt4gemstone>
									Defaults to $ROWAN_PROJECTS_HOME/gt4gemstone.
  --gtoolkitRemote=<path-to-gtoolkit-remote>
                  Defaults to <projectsHome>/gtoolkitRemote
  --projectsHome=<path-to-git-clones>
                    Defaults to $ROWAN_PROJECTS_HOME.

EXAMPLES
  $basename --help
  $basename -D <script-arguments>
-----
%
instvars
rowanProjectsHome
gt4gemstone
gtoolkitRemote
%
specs
[
RwLoadSpecificationV2 {
	#specName : 'gtoolkit-remote',
	#projectName : 'gtoolkit-remote',
	#gitUrl : 'git@github.com:feenkcom/gtoolkit-remote.git',
	#revision : 'master',
	#projectSpecFile : 'rowan/project.ston',
	#componentNames : [
		'Core'
	],
	#platformProperties : {
		'gemstone' : {
			'SystemUser' : {
				#defaultSymbolDictName : 'Globals'
			}
		}
	},
	#comment : ''
}
]
%
doit
	| warnings |
	self projectsHome
		ifNotNil: [:val | 
			"--projectsHome set"
			rowanProjectsHome := val asFileReference pathString.
			System gemEnvironmentVariable: 'ROWAN_PROJECTS_HOME' put: rowanProjectsHome ]
		ifNil: [
			(System gemEnvironmentVariable: 'ROWAN_PROJECTS_HOME')
				ifNil: [ self error: 'ROWAN_PROJECTS_HOME must be defined via env var or by using --projectsHome' ]
				ifNotNil: [:val | 
					rowanProjectsHome := val asFileReference pathString ] ].
	self stdout nextPutAll: 'ROWAN_PROJECTS_HOME = ', rowanProjectsHome asString; lf.
	gt4gemstone := self gt4gemstone asFileReference pathString.
	self stdout nextPutAll: 'gt4gemstone loaded from ', gt4gemstone asString; lf.
  self gtoolkitRemote
		ifNotNil: [:val | gtoolkitRemote := val  asFileReference pathString ].
	warnings := String new.
	[
		(Rowan 
			projectFromUrl: 'file:', gt4gemstone, '/rowan/specs/gt4gemstone.ston')
				projectsHome: rowanProjectsHome;
			load.
true ifTrue: [
"hacky workaround for https://github.com/feenkcom/gtoolkit-remote/issues/1 and 
	https://github.com/feenkcom/gtoolkit-remote/issues/2"
		gtoolkitRemote 
			ifNotNil: [
				self stdout nextPutAll: 'gtoolkitRemote loaded from ', gtoolkitRemote asString; lf.
				(Rowan 
					projectFromUrl: 'file:', gtoolkitRemote, '/rowan/specs/gtoolkitRemote.ston')
						projectsHome: rowanProjectsHome;
					load  ]
			ifNil: [
				self preDoitSpecLoad: [:spec | 
					self stdout nextPutAll: 'gtoolkitRemote loaded from ', rowanProjectsHome, '/', spec projectName ; lf.
					spec projectsHome: rowanProjectsHome ] ]
].
	] on: CompileWarning do: [:ex |
		(ex description includesString: 'not optimized')
			ifFalse: [ 
				warnings 
					addAll: ex asString;
					lf ].
		ex resume ].
	warnings isEmpty
		ifFalse: [ 
			self stdout nextPutAll: warnings.
			self 
				exit: 'Unexpected CompileWarnings during load' 
				withStatus: 1 ].
	System commit
%
